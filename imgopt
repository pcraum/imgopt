#!/usr/bin/env bash

# Simple bash script to use find to recursively locate JPEG/PNG files
# and process them with jpegtran, pngout, pngcrush for macosx
# using settings to minimize file size and strip all metadata headers.
#
# To change optimization programs/settings, edit/comment out in functions
# do_jpeg and do_png below.
#
# Authors: Joel Hardi, Rob Smith, Daniel Kamil Kozar, Patrick Poulain
# Version: 0.0.1 2014-04-11
#
# cmd line option are from http://css-ig.net/png-tools-overview.html
#

# Global stat vars
STAT_FILE_COUNT="0"
STAT_FILE_SIZE_START="0"
STAT_FILE_SIZE_END="0"

# The variable which holds the path to the temporary file on which the actual
# processing is done.
TMPF=""

# Do we have a tty?
interactive="0"
tty -s &> /dev/null && interactive="1"

set -o nounset
set -o errexit
set -o pipefail

# Verbose output if interactive
verbose() {
  if [[ "${interactive}" -eq "1" ]]
  then
    echo "${1}"
  fi
}

# Usage help text
usage () {
  cat - <<EOF
Usage: imgopt [FILE/DIR] [FILE/DIR] [FILE/DIR] ...

Optimizes any combination of files and directories. Directories are searched
recursively, and all image files in any subdirectories are optimized.

Examples:

 imgopt .      Optimize all images in current directory and any subdirectories
 imgopt *.png  Optimize all pngs in current directory only

EOF
}

check_bin() {
  # $1 is the binary
  # $2 is the text to print if missing
  hash "${1}" &> /dev/null
  if [[ "${?}" -ne "0" ]]; then
    echo -e "${2}"
    exit 1
  fi
  return 0
}

do_stats () {
  # Did we actually save any space?
  if [[ "${STAT_FILE_SIZE_START}" -eq "0" ]]
  then
    echo "I processed ${STAT_FILE_COUNT} files saving 0 bytes"
    return
  fi

  local stat_file_size_diff=$((STAT_FILE_SIZE_START-STAT_FILE_SIZE_END))
  local stat_file_size_diff_percent=$((stat_file_size_diff*100/STAT_FILE_SIZE_START))
  echo "I processed ${STAT_FILE_COUNT} files saving ${stat_file_size_diff} bytes ( ${stat_file_size_diff_percent}% )"
}

get_file_size () {
  local file="${1}"
  st_size=""

  # BSD stat?
  eval $(stat -s "${file}" 2>/dev/null || true)
  if [[ -n "${st_size}" ]]
  then
    return
  fi

  # GNU stat
  st_size=$(stat -c '%s' "${file}")

  if [[ -n "${st_size}" ]]
  then
    return
  fi

  echo "Unknown version of stat?" 1>&2
  exit 1
}

# Optimize PNG file in place
# (edit here to add/remove PNG optimizing steps or change parameters)
# More information on PNG optimization techniques:
# http://optipng.sourceforge.net/pngtech/optipng.html
do_png () {
  # $1 is filename
  local tmp_png=$(mktemp -t imgopt.tmp.png.XXXXXX)
  # pngcrush can be installed using brew :
  # brew install pngcrush
  verbose "Optimizing with pngcrush..."
  pngcrush -brute -blacken -reduce -rem text -rem alla -rem time "${1}" "${tmp_png}" || true
  
  # Overwrite in place existing jpeg file
  cat "${tmp_png}" > "${1}"
  # remove the temp file
  rm -f "${tmp_png}"

  # pngout can be installed using brew :
  # brew install https://gist.githubusercontent.com/lucasmichot/10379237/raw/ed849e34d32d47f91fca08eec13bdbbe871f10b9/pngout.rb
  verbose "Optimizing with pngout..."
  pngout "${1}" "${TMPF}" -q -y || true
  # Sometimes (not always) pngout appends ".PNG" to output filename
  if [[ -f ${TMPF}.PNG ]]
  then
    cat "${TMPF}.PNG" > "${TMPF}"
    rm -f "${TMPF}.PNG"
  fi

  return 0
}

# Optimize JPEG file in place
# (edit here to add/remove JPEG optimizing steps or change parameters)
do_jpeg () {
  # $1 is filename
  local tmp_jpeg=$(mktemp -t imgopt.tmp.jpg.XXXXXX)

  # jpegtran is part of libjpeg (almost surely already on your system).
  # If not, it's here:
  # http://www.ijg.org/
  verbose "Optimizing with jpegtran..."
  jpegtran -copy none -optimize -outfile "${tmp_jpeg}" "${1}" || true

  # Overwrite in place existing jpeg file
  cat "${tmp_jpeg}" > "${1}"

  # remove the temp file
  rm -f "${tmp_jpeg}"

  return 0
}

# Optimize file, only replace original if optimized version is smaller
do_file () {
  STAT_FILE_COUNT=$((STAT_FILE_COUNT+1))
  # $1 is name of file
  if [[ -w "${1}" ]]
  then

    # Copy file to tmp file and optimize in place
    cp -f "${1}" "${TMPF}"

    # Try mime identifying
    local mime=$(file -b --mime-type "${1}" 2>/dev/null)
    if [[ "${?}" -eq "0" ]]
    then
      case "${mime}" in
        image/png )
          do_png "${TMPF}"
        ;;
        image/jpeg )
          do_jpeg "${TMPF}"
        ;;
        * )
          echo "${1} could not be identified, please verify the type!"
          return 1
        ;;
      esac
    else
      # Fall back to file extension
      case "$1" in
        *.[Pp][Nn][Gg] )
          do_png "${TMPF}"
        ;;
        *.[Jj][Pp][Ee][Gg] )
          do_jpeg "${TMPF}"
        ;;
        *.[Jj][Pp][Gg] )
          do_jpeg "${TMPF}"
        ;;
        * )
          echo "${1} could not be identified, please rename to .jpg or .png"
          return 1
        ;;
      esac
    fi

    # If optimized file is smaller, copy it over original
    get_file_size "${1}"
    local size_before="${st_size}"
    get_file_size "${TMPF}"
    local size_after="${st_size}"

    local bytes_reduced=$((size_before-size_after))
    if [[ "${size_after}" -lt "${size_before}" ]]
    then
      STAT_FILE_SIZE_START=$((STAT_FILE_SIZE_START+size_before))
      STAT_FILE_SIZE_END=$((STAT_FILE_SIZE_END+size_after))
      cat "${TMPF}" > "${1}"
      echo "${1} reduced ${bytes_reduced} bytes to ${size_after} bytes"
    else
      echo "${1} unchanged at $size_before bytes"
    fi

    return 0
  else
    echo "${1} is not writable, skipping"
    return 1
  fi
}

# Optimize recursively all files in a directory
do_dir () {
  # $1 is name of dir
  local ret_val="0"
  while IFS= read -r -u 3 -d $'\0' file; do
    do_file "${file}"
    ret_val=$?
  done 3< <(find "${1}" -type f \( -iregex '.*\.[jp][pn]g$' -o -iregex '.*\.jpeg$' \) -print0)
  return $ret_val
}

# Sanity check binaries
check_bin pngcrush    "pngcrush is available via brew install pngcrush"
check_bin pngout     "pngout is available via brew install https://gist.githubusercontent.com/lucasmichot/10379237/raw/ed849e34d32d47f91fca08eec13bdbbe871f10b9/pngout.rb"
check_bin jpegtran   "jpegtran is available via brew install jpegtran"

if [[ "${#}" -eq "0" ]]
then
  usage
  exit
fi

# If run with args, optimize these files or recursively all files in a dir
for arg in "${@}"
do
  if [[ "${arg}" == "-h" ]] || [[ "${arg}" == "--help" ]]
  then
    usage
    exit
  fi
  TMPF=$(mktemp imgopt.tmp.XXXXXX)
  RETURNVAL=1
  if [[ -d "${arg}" ]]
  then
    do_dir "${arg}"
    RETURNVAL="${?}"
  elif [[ -f ${arg} ]]
  then
    do_file "${arg}"
    RETURNVAL="${?}"
  else
    echo "${arg} is neither a file nor a directory, skipping"
  fi
  rm -f "${TMPF}"
done
do_stats
exit "${RETURNVAL}"
